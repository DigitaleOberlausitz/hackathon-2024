{"version":3,"file":"83119f701c202f81dcb29946caf50e4fb692e45b-07dfa731b7cb7d23d6b7.js","mappings":"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","sources":["webpack://hackathon-2024/./node_modules/extend/index.js","webpack://hackathon-2024/./src/components/navbar/navbar.tsx","webpack://hackathon-2024/./src/components/layout.tsx","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/inline-style-parser/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/cjs/index.js","webpack://hackathon-2024/./node_modules/estree-util-is-identifier-name/lib/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/esm/index.mjs","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://hackathon-2024/./node_modules/unist-util-stringify-position/lib/index.js","webpack://hackathon-2024/./node_modules/vfile-message/lib/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","webpack://hackathon-2024/./node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","webpack://hackathon-2024/./node_modules/html-url-attributes/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://hackathon-2024/./node_modules/micromark-util-chunked/index.js","webpack://hackathon-2024/./node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://hackathon-2024/./node_modules/micromark-util-subtokenize/index.js","webpack://hackathon-2024/./node_modules/micromark-util-combine-extensions/index.js","webpack://hackathon-2024/./node_modules/micromark-util-character/index.js","webpack://hackathon-2024/./node_modules/micromark-factory-space/index.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/content.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/document.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/content.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/text.js","webpack://hackathon-2024/./node_modules/micromark-util-resolve-all/index.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/list.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://hackathon-2024/./node_modules/micromark-factory-destination/index.js","webpack://hackathon-2024/./node_modules/micromark-factory-label/index.js","webpack://hackathon-2024/./node_modules/micromark-factory-title/index.js","webpack://hackathon-2024/./node_modules/micromark-factory-whitespace/index.js","webpack://hackathon-2024/./node_modules/micromark-util-normalize-identifier/index.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://hackathon-2024/./node_modules/micromark-util-html-tag-name/index.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://hackathon-2024/./node_modules/decode-named-character-reference/index.dom.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://hackathon-2024/./node_modules/micromark-util-classify-character/index.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://hackathon-2024/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/constructs.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/parse.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/preprocess.js","webpack://hackathon-2024/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://hackathon-2024/./node_modules/micromark-util-decode-string/index.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-from-markdown/node_modules/micromark/lib/postprocess.js","webpack://hackathon-2024/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://hackathon-2024/./node_modules/@ungap/structured-clone/esm/types.js","webpack://hackathon-2024/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://hackathon-2024/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://hackathon-2024/./node_modules/@ungap/structured-clone/esm/index.js","webpack://hackathon-2024/./node_modules/micromark-util-sanitize-uri/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/node_modules/unist-util-is/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/node_modules/unist-util-visit-parents/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/node_modules/unist-util-position/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://hackathon-2024/./node_modules/trim-lines/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/state.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/node_modules/unist-util-visit/lib/index.js","webpack://hackathon-2024/./node_modules/mdast-util-to-hast/lib/index.js","webpack://hackathon-2024/./node_modules/remark-rehype/lib/index.js","webpack://hackathon-2024/./node_modules/unified/node_modules/bail/index.js","webpack://hackathon-2024/./node_modules/unified/node_modules/is-plain-obj/index.js","webpack://hackathon-2024/./node_modules/unified/node_modules/trough/lib/index.js","webpack://hackathon-2024/./node_modules/vfile/lib/minpath.browser.js","webpack://hackathon-2024/./node_modules/vfile/lib/minproc.browser.js","webpack://hackathon-2024/./node_modules/vfile/lib/minurl.shared.js","webpack://hackathon-2024/./node_modules/vfile/lib/minurl.browser.js","webpack://hackathon-2024/./node_modules/vfile/lib/index.js","webpack://hackathon-2024/./node_modules/unified/lib/callable-instance.js","webpack://hackathon-2024/./node_modules/unified/lib/index.js","webpack://hackathon-2024/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://hackathon-2024/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://hackathon-2024/./node_modules/react-markdown/lib/index.js","webpack://hackathon-2024/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import { Link } from \"gatsby\"\nimport React, { FC } from \"react\"\n\nimport \"./navbar.scss\"\n\nexport const Navbar: FC = () => (\n    <div className=\"navbar\">\n        <ul>\n            <li>\n                <Link to=\"/\">Allgemein</Link>\n            </li>\n            <li>\n                <Link to=\"/what-is-a-hackathon\">Was ist ein Hackathon?</Link>\n            </li>\n            <li>\n                <Link to=\"/challenges\">Challenge</Link>\n                <ul>\n                    <li>\n                        <Link to=\"/challenge-erfassung-dachflaechen\">Dachflächen</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/challenge-reparatur-kultur\">Reparatur-Kultur</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/challenge-hitzeprobleme\">Hitzeprobleme</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/challenge-gruenflaechen\">Urban Gardening</Link>\n                    </li>\n\t\t\t\t\t<li>\n                        <Link to=\"/challenge-eisenbahn\">Eisenbahn</Link>\n                    </li>\n                </ul>\n            </li>\n            {/*<li>*/}\n            {/*    <Link to=\"/results\">*/}\n            {/*        <strong>Ergebnisse</strong>*/}\n            {/*    </Link>*/}\n            {/*</li>*/}\n            <li>\n                <p>Sponsoring</p>\n                <ul>\n                    <li>\n                        <Link to=\"/sponsors\">Unsere Sponsoren</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/sponsoring\">Sponsor werden</Link>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <Link to=\"/participate\">Teilnehmen</Link>\n            </li>\n            <li>\n                <Link to=\"/support\">Unterstützen</Link>\n            </li>\n        </ul>\n        <div className=\"archive\">\n            <p>Archiv</p>\n            <ul>\n                <li>\n                    <a href=\"https://hackathon2023.digitale-oberlausitz.eu\">2023</a>\n                </li>\n                <li>\n                    <a href=\"https://hackathon2022.digitale-oberlausitz.eu\">2022</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n)\n","import { Link } from \"gatsby\"\nimport React, { FC, PropsWithChildren } from \"react\"\nimport { Navbar } from \"./navbar/navbar\"\n\nimport \"typeface-roboto-mono\"\n\nimport \"./index.scss\"\nimport \"./App.scss\"\n\nexport const Layout: FC<PropsWithChildren> = ({ children }) => (\n    <div className=\"App\">\n        <div className=\"header dark\">\n            <div className=\"title\">\n                <p>\n                    <a href=\"https://www.digitale-oberlausitz.eu\">Digitale Oberlausitz e.V.</a> präsentiert:\n                </p>\n                <Link to=\"/\">\n                    <img id=\"hackathon-logo\" alt=\"Hackathon 2024 Home\" src=\"/hackathon2024-schriftzug.svg\" />\n                </Link>\n            </div>\n        </div>\n\n        <div className=\"main\">\n            <Navbar />\n\n            <main className=\"content\">{children}</main>\n        </div>\n\n        <div className=\"footer dark\">\n            <div className=\"footer-content\">\n                <Link to=\"/impressum\">Impressum</Link>\n                <Link to=\"/code-of-conduct\">Code of Conduct</Link>\n            </div>\n        </div>\n    </div>\n)\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\nexports.default = StyleToObject;\n//# sourceMappingURL=index.js.map","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","Navbar","React","className","Link","to","href","Layout","_ref","children","id","alt","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","__importDefault","mod","__esModule","inline_style_parser_1","iterator","styleObject","default","hasIterator","forEach","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","index","assign","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","toUpperCase","hastToReact","point","pointStart","undefined","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","replacer","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","all","extension","hook","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","createState","footnoteById","handlers","nodes","trimMarkdownSpaceStart","handle","passThrough","shallow","unknownHandler","defaultUnknownHandler","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign"],"sourceRoot":""}